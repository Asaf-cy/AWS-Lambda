import boto3
import os
from collections import defaultdict

# SES + Config
SENDER_EMAIL = "asaf.censored@censored.com"
SECURITY_TEAM_EMAIL = "security@censored.com"
ACCOUNT_ALIAS_ENV = "ACCOUNT_EMAIL_ALIAS"
TARGET_PORTS = {22, 23, 3389}

ses = boto3.client('ses')
ec2 = boto3.client('ec2')

def lambda_handler(event, context):
    regions = [r['RegionName'] for r in ec2.describe_regions()['Regions']]
    findings = defaultdict(list)

    for region in regions:
        try:
            ec2_region = boto3.client('ec2', region_name=region)
            public_instances = get_instances_with_public_ips(ec2_region)

            if not public_instances:
                print(f"No instances with public IP in {region}. Skipping...")
                continue

            print(f"‚úî Found {len(public_instances)} public instance(s) in {region}")

            reservations = ec2_region.describe_instances(
                Filters=[{'Name': 'instance-id', 'Values': list(public_instances)}]
            )['Reservations']

            for reservation in reservations:
                for instance in reservation['Instances']:
                    instance_id = instance['InstanceId']
                    instance_name = get_tag(instance, 'Name') or "Unnamed Instance"
                    owner_email = get_tag(instance, 'owner')

                    print(f"\nüîç Checking instance {instance_name} ({instance_id}) in {region}")

                    if instance_has_tag(instance, 'MyTag'):
                        print("‚è≠ Skipped: Has MyTag")
                        continue

                    sg_changes = []
                    for sg in instance['SecurityGroups']:
                        sg_id, sg_name = sg['GroupId'], sg['GroupName']
                        try:
                            sg_detail = ec2_region.describe_security_groups(GroupIds=[sg_id])['SecurityGroups'][0]
                            for rule in sg_detail['IpPermissions']:
                                protocol = rule.get("IpProtocol")
                                from_port = rule.get("FromPort")
                                cidrs = [ip.get('CidrIp') for ip in rule.get('IpRanges', [])]
                                has_open_cidr = '0.0.0.0/0' in cidrs
                                is_all_traffic = protocol == "-1"
                                is_target_port = from_port in TARGET_PORTS

                                if has_open_cidr and (is_target_port or is_all_traffic):
                                    ec2_region.revoke_security_group_ingress(GroupId=sg_id, IpPermissions=[rule])
                                    removed = "All Traffic" if is_all_traffic else f"Port {from_port}"
                                    print(f"‚úÖ Removed {removed} from SG ({sg_name}) on instance {instance_name}")
                                    sg_changes.append((sg_name, removed))
                        except Exception as e:
                            print(f"‚ùå Error checking SG {sg_name}: {e}")

                    if sg_changes:
                        findings[owner_email].append({
                            'region': region,
                            'instance_name': instance_name,
                            'instance_id': instance_id,
                            'sg_changes': sg_changes
                        })

        except Exception as e:
            print(f"‚ùå Error processing region {region}: {e}")

    for owner_email, instances in findings.items():
        recipients = []

        if is_valid_email(owner_email):
            recipients.append(owner_email)
        else:
            print(f"‚ö†Ô∏è Invalid or missing owner tag, skipping owner email")

        recipients.append(SECURITY_TEAM_EMAIL)

        account_email = os.environ.get(ACCOUNT_ALIAS_ENV)
        if account_email:
            recipients.append(account_email)

        recipients = list(set(recipients))  # remove dups
        subject = "[Security Cleanup] Open ports removed from your EC2 instances"
        message = build_owner_email(instances)

        send_email_ses(recipients, subject, message)

# ------------------ Helpers ------------------

def get_instances_with_public_ips(ec2_client):
    public_instances = set()
    paginator = ec2_client.get_paginator('describe_instances')
    for page in paginator.paginate(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}]):
        for reservation in page['Reservations']:
            for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                if 'PublicIpAddress' in instance:
                    print(f"üåê Public IP: {instance['PublicIpAddress']} on instance {instance_id}")
                    public_instances.add(instance_id)
                    continue
                for iface in instance.get("NetworkInterfaces", []):
                    public_ip = iface.get("Association", {}).get("PublicIp")
                    if public_ip:
                        print(f"üåê Public IP: {public_ip} (interface-level) on instance {instance_id}")
                        public_instances.add(instance_id)
                        break
    return public_instances

def get_tag(instance, key):
    for tag in instance.get('Tags', []):
        if tag['Key'].lower() == key.lower():
            return tag['Value']
    return None

def instance_has_tag(instance, tag_key):
    return any(tag['Key'].lower() == tag_key.lower() for tag in instance.get('Tags', []))

def is_valid_email(email):
    return email and "@" in email

def build_owner_email(instances):
    lines = ["Hi,\n\nThe following changes were made to your EC2 instances for security reasons:\n"]
    has_all_traffic_rule = False

    for inst in instances:
        lines.append(f"üñ• Instance: {inst['instance_name']} ({inst['instance_id']}) in {inst['region']}")
        for sg_name, removed in inst['sg_changes']:
            lines.append(f"   üîê Removed public rule: {removed} from SG: {sg_name}")
            if "All Traffic" in removed:
                has_all_traffic_rule = True
        lines.append("")

    # Tailored footer
    if has_all_traffic_rule:
        lines.append("‚ö†Ô∏è Allowing unrestricted access on *all ports* is a breach of company policy.")
        lines.append("Please only allow required ports ‚Äî you can do better üí™")
    else:
        lines.append("Please use AWS SSM for internal/private access.")
        lines.append("These open ports violate company security policy.")

    lines.append("\n‚Äì Security Team")
    return "\n".join(lines)

def send_email_ses(recipients, subject, message):
    try:
        response = ses.send_email(
            Source=SENDER_EMAIL,
            Destination={"ToAddresses": recipients},
            Message={
                "Subject": {"Data": subject},
                "Body": {"Text": {"Data": message}}
            }
        )
        print(f"‚úÖ Email sent to: {', '.join(recipients)} | Message ID: {response['MessageId']}")
    except Exception as e:
        print(f"‚ùå Failed to send email to: {', '.join(recipients)}")
        print(f"   ‚û§ Error: {e}")
        print(f"   ‚û§ Subject: {subject}")
        print(f"   ‚û§ Body preview:\n{message[:250]}...")
