import boto3

def lambda_handler(event, context):
    try:
        ec2 = boto3.client('ec2')
        regions = [region['RegionName'] for region in ec2.describe_regions()['Regions']]

        for region in regions:
            try:
                ec2_region = boto3.client('ec2', region_name=region)

                # Step 1: Get all Elastic IPs attached to instances
                elastic_ips = ec2_region.describe_addresses()['Addresses']
                instance_ids_with_eip = {eip['InstanceId'] for eip in elastic_ips if 'InstanceId' in eip}

                if not instance_ids_with_eip:
                    print(f"No instances with Elastic IP in {region}. Skipping...")
                    continue
                
                # Step 2: Fetch security groups of instances with EIP
                running_instances = ec2_region.describe_instances(
                    Filters=[{'Name': 'instance-id', 'Values': list(instance_ids_with_eip)}]
                )['Reservations']

                for reservation in running_instances:
                    for instance in reservation['Instances']:
                        instance_id = instance['InstanceId']
                        instance_name = get_instance_name(instance)

                        # Check if the instance has the specific tag
                        if instance_has_tag(ec2_region, instance_id, 'MyTag'):
                            continue  # Skip if the tag is found

                        # Get unique security groups
                        security_groups = {group['GroupId']: group['GroupName'] for group in instance['SecurityGroups']}

                        for group_id, group_name in security_groups.items():
                            try:
                                sg_details = ec2_region.describe_security_groups(GroupIds=[group_id])['SecurityGroups'][0]
                                inbound_rules = sg_details['IpPermissions']

                                for rule in inbound_rules:
                                    if (
                                        'FromPort' in rule and 
                                        rule['FromPort'] in [22, 23, 3389] and 
                                        any(ip_range['CidrIp'] == '0.0.0.0/0' for ip_range in rule.get('IpRanges', []))
                                    ):
                                        try:
                                            # Remove the unrestricted access rule without replacement
                                            ec2_region.revoke_security_group_ingress(GroupId=group_id, IpPermissions=[rule])
                                            print(f"Deleted unrestricted rule [Port: {rule['FromPort']}] "
                                                  f"from Security Group ({group_name}) "
                                                  f"for instance ({instance_name}) in {region}")
                                        except Exception as e:
                                            print(f"Failed to delete rule from Security Group ({group_name}) in {region}: {e}")
                            except Exception as e:
                                print(f"Error processing Security Group ({group_name}) in {region}: {e}")

            except Exception as e:
                print(f"Error processing region {region}: {e}")

    except Exception as e:
        print(f"Failed to retrieve regions: {e}")

def instance_has_tag(ec2_client, instance_id, tag_key):
    """Check if an instance has a specific tag."""
    try:
        response = ec2_client.describe_instances(InstanceIds=[instance_id])
        instance = response['Reservations'][0]['Instances'][0]
        tags = instance.get('Tags', [])
        return any(tag['Key'] == tag_key for tag in tags)
    except Exception as e:
        print(f"Error checking tag {tag_key} on instance {instance_id}: {e}")
        return False

def get_instance_name(instance):
    """Retrieve the Name tag of an EC2 instance."""
    tags = instance.get('Tags', [])
    for tag in tags:
        if tag['Key'] == 'Name':
            return tag['Value']
    return "Unnamed Instance"
