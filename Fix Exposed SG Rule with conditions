import boto3

def lambda_handler(event, context):
    try:
        ec2 = boto3.client('ec2')
        regions = [region['RegionName'] for region in ec2.describe_regions()['Regions']]
        for region in regions:
            try:
                ec2_region = boto3.client('ec2', region_name=region)
                running_instances = ec2_region.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])['Reservations']
                for reservation in running_instances:
                    for instance in reservation['Instances']:
                        instance_id = instance['InstanceId']
                        
                        # Check if the instance has a specific tag (e.g., 'MyTag' with value 'TagValue')
                        tags = instance.get('Tags', [])
                        tag_value = None
                        for tag in tags:
                            if tag['Key'] == 'MyTag':
                                tag_value = tag['Value']
                                break
                        
                        # Only remove the rule if the specific tag is not found
                        if tag_value is None:
                            security_groups = [group['GroupId'] for group in instance['SecurityGroups']]
                            security_groups = list(set(security_groups))
                            for group_id in security_groups:
                                try:
                                    inbound_rules = ec2_region.describe_security_groups(GroupIds=[group_id])['SecurityGroups'][0]['IpPermissions']
                                    for rule in inbound_rules:
                                        if rule['IpRanges'] and rule['IpRanges'][0]['CidrIp'] == '0.0.0.0/0':
                                            try:
                                                ec2_region.revoke_security_group_ingress(GroupId=group_id, IpPermissions=[rule])
                                                ec2_region.authorize_security_group_ingress(GroupId=group_id, IpPermissions=[{'IpProtocol': rule['IpProtocol'], 'FromPort': rule['FromPort'], 'ToPort': rule['ToPort'], 'IpRanges': [{'CidrIp': 'X.X.X.X/32'}]}])
                                            except Exception as e:
                                                print("Failed to update the security group rule: ", e)
                                            
                                    owner_email = get_instance_tag_value(ec2_region, instance_id, 'owner')
                                    
                                    if owner_email:
                                        print(f"Email sent to {owner_email}")
                                except Exception as e:
                                    print("Error processing security group:", group_id, e)
            except Exception as e:
                print("Error processing region:", region, e)
    except Exception as e:
        print("Failed to get user details: ", e)

def get_instance_tag_value(ec2_client, instance_id, tag_key):
    try:
        response = ec2_client.describe_instances(InstanceIds=[instance_id])
        if 'Reservations' in response and len(response['Reservations']) > 0:
            instance = response['Reservations'][0]['Instances'][0]
            tags = instance.get('Tags', [])
            for tag in tags:
                if tag['Key'] == 'MyTag':
                    return tag['Value']
    except Exception as e:
        print(f"Error getting tag value for {tag_key} on instance {instance_id}: {e}")
    
    return None

    pass
