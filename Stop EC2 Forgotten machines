import boto3
from datetime import datetime, timedelta
import smtplib
from email.mime.text import MIMEText

def lambda_handler(event, context):
    # Set thresholds for CPU usage and network traffic in bytes
    cpu_threshold = 1
    network_in_threshold_bytes = 2500  # 1 kb
    network_out_threshold_bytes = 3000  # 1.5 kb
    consecutive_days_threshold = 11

    # Create EC2 resource for stopping instances
    ec2_resource = boto3.resource('ec2')

    # Get all running instances
    ec2_client = boto3.client('ec2')
    response = ec2_client.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': ['running']}])
    reservations = response['Reservations']

    # Initialize dictionaries to store the count and cost of stopped instances by instance type
    stopped_instances_by_type = {}
    stopped_instances_cost_by_type = {}

    # Loop through reservations
    for reservation in reservations:
        instances = reservation['Instances']
        for instance in instances:
            instance_id = instance['InstanceId']
            instance_type = instance['InstanceType']
            launch_time = instance['LaunchTime']
            region = instance['Placement']['AvailabilityZone'][:-1]  # Extract region from availability zone
            account_id = boto3.client('sts').get_caller_identity().get('Account')

            # Calculate the number of days the instance has been running
            running_days = (datetime.utcnow() - launch_time.replace(tzinfo=None)).days

        # Check if the instance has been running for more than the consecutive days threshold
        if running_days >= consecutive_days_threshold:
            stop_instance = True  # Flag to determine if the instance should be stopped

            for i in range(consecutive_days_threshold):
                start_time = datetime.utcnow() - timedelta(days=i + 1)
                end_time = datetime.utcnow() - timedelta(days=i)

                # Get network in and network out metrics for the instance
                network_in = get_network_metric(instance_id, 'NetworkIn', start_time, end_time)
                network_out = get_network_metric(instance_id, 'NetworkOut', start_time, end_time)

                # Check if the instance meets the threshold criteria for the current day
                if network_in >= network_in_threshold_bytes or network_out >= network_out_threshold_bytes:
                    stop_instance = False  # Instance does not meet the threshold for this day, skip to the next day
                    break

            if stop_instance:
                # Use the EC2 resource to stop the instance
                ec2_resource.Instance(instance_id).stop()
                print(f"Instance {instance_id} ({instance_type}) in region {region} meets the threshold for all consecutive days. Stopping instance...")

                # Update the count of stopped instances by instance type
                stopped_instances_by_type[instance_type] = stopped_instances_by_type.get(instance_type, 0) + 1

                # Calculate the cost of the stopped instance
                instance_cost = calculate_instance_cost(instance_type, consecutive_days_threshold)
                stopped_instances_cost_by_type[instance_type] = stopped_instances_cost_by_type.get(instance_type, 0) + instance_cost

                # Get the owner tag value (email address)
                owner_email = get_instance_tag_value(ec2_client, instance_id, 'owner')

                if owner_email:
                    try:
                        # Send email to owner
                        send_email(owner_email, instance_id, region, account_id)
                        print(f"Email sent to {owner_email}")
                    except smtplib.SMTPAuthenticationError as e:
                        print(f"Failed to send email to {owner_email}: {e}")
                    except Exception as e:
                        print(f"Error sending email to {owner_email}: {e}")

            else:
                print(f"Instance {instance_id} ({instance_type}) does not meet the threshold for all consecutive days. Skipping instance...")

        else:
            print(f"Instance {instance_id} ({instance_type}) has not been running for the consecutive days threshold.")

    # Print the summary of stopped instances by instance type
    print("Summary of stopped instances by instance type:")
    for instance_type, count in stopped_instances_by_type.items():
        print(f"{instance_type}: {count} instances stopped")

    # Print the summary of stopped instances by instance type with cost
    print("Summary of stopped instances by instance type with cost:")
    for instance_type, cost in stopped_instances_cost_by_type.items():
        print(f"{instance_type}: {cost} instances stopped, Cost: ${cost}")

    print("Lambda execution completed.")


def get_network_metric(instance_id, metric_name, start_time, end_time):
    cw = boto3.client('cloudwatch')

    response = cw.get_metric_statistics(
        Namespace='AWS/EC2',
        MetricName=metric_name,
        Dimensions=[{'Name': 'InstanceId', 'Value': instance_id}],
        StartTime=start_time,
        EndTime=end_time,
        Period=86400,  # 1 day period
        Statistics=['Average']
    )

    # Extract the average value from the response
    datapoints = response['Datapoints']
    if datapoints:
        return datapoints[0]['Average']

    return 0  # Return 0 if no data points are available


def calculate_instance_cost(instance_type, consecutive_days_threshold):
    ce = boto3.client('ce')

    start_date = (datetime.utcnow() - timedelta(days=consecutive_days_threshold)).strftime('%Y-%m-%d')
    end_date = datetime.utcnow().strftime('%Y-%m-%d')

    response = ce.get_cost_and_usage(
        TimePeriod={
            'Start': start_date,
            'End': end_date
        },
        Granularity='DAILY',
        Metrics=['UnblendedCost'],
        Filter={
            'Dimensions': {
                'Key': 'INSTANCE_TYPE',
                'Values': [instance_type]
            }
        }
    )

    results_by_time = response['ResultsByTime']
    total_cost = 0
    for result in results_by_time:
        total_cost += float(result['Total']['UnblendedCost']['Amount'])

    return total_cost



def get_instance_tag_value(ec2_client, instance_id, owner):
    response = ec2_client.describe_tags(
        Filters=[
            {
                'Name': 'resource-id',
                'Values': [instance_id]
            },
            {
                'Name': 'key',
                'Values': [owner]
            }
        ]
    )
    if 'Tags' in response:
        for tag in response['Tags']:
            if tag['Key'] == owner and tag['Value']:
                return tag['Value']
    return None


def send_email(email_address, instance_id, region, account_id):
    sender_email = 'XXX'  # Replace with your sender email address
    subject = 'Important: Your EC2 Instance Has Been Stopped'
    message = f"Hey,\n\nYour EC2 instance ({instance_id}) in region {region} and account ID {account_id} has been stopped " \
              f"since it didn't detect any usage. If it's still in use, please contact your account manager or security.\n\n" \
              f"Best regards,\nYour Company"

    # Create a MIME text object
    email_message = MIMEText(message)
    email_message['Subject'] = subject
    email_message['From'] = sender_email
    email_message['To'] = email_address

    # Send the email using SMTP
    smtp_client = smtplib.SMTP('email-smtp.XXX.amazonaws.com', 587)  # Replace with your SMTP endpoint
    smtp_client.starttls()
    smtp_client.login('XXX', 'XXX')  # Replace with your SMTP username and password
    smtp_client.sendmail(sender_email, email_address, email_message.as_string())
    smtp_client.quit()
