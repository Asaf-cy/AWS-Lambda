import boto3
from datetime import datetime, timedelta

def get_instance_name(instance):
    for tag in instance.get('Tags', []):
        if tag['Key'] == 'Name':
            return tag['Value']
    return 'N/A'

def lambda_handler(event, context):
    # Fetch all available regions dynamically
    ec2_client = boto3.client('ec2')
    response = ec2_client.describe_regions()
    regions = [region['RegionName'] for region in response['Regions']]
    
    low_activity_instances = []

    for region in regions:
        try:
            ec2 = boto3.client('ec2', region_name=region)
            cw = boto3.client('cloudwatch', region_name=region)
            
            # Get instances in the region
            instances = ec2.describe_instances()
        except Exception as e:
            print(f"Error fetching instances or CloudWatch data for region {region}: {str(e)}")
            continue
        
        for reservation in instances['Reservations']:
            for instance in reservation['Instances']:
                instance_id = instance['InstanceId']
                instance_name = get_instance_name(instance)
                instance_type = instance['InstanceType']

                # Fetch CPU and network metrics
                try:
                    cpu_metric = cw.get_metric_statistics(
                        Namespace='AWS/EC2',
                        MetricName='CPUUtilization',
                        Dimensions=[{'Name': 'InstanceId', 'Value': instance_id}],
                        StartTime=datetime.utcnow() - timedelta(days=30),
                        EndTime=datetime.utcnow(),
                        Period=86400,
                        Statistics=['Average']
                    )
                    network_in_metric = cw.get_metric_statistics(
                        Namespace='AWS/EC2',
                        MetricName='NetworkIn',
                        Dimensions=[{'Name': 'InstanceId', 'Value': instance_id}],
                        StartTime=datetime.utcnow() - timedelta(days=30),
                        EndTime=datetime.utcnow(),
                        Period=86400,
                        Statistics=['Average']
                    )
                    network_out_metric = cw.get_metric_statistics(
                        Namespace='AWS/EC2',
                        MetricName='NetworkOut',
                        Dimensions=[{'Name': 'InstanceId', 'Value': instance_id}],
                        StartTime=datetime.utcnow() - timedelta(days=30),
                        EndTime=datetime.utcnow(),
                        Period=86400,
                        Statistics=['Average']
                    )
                except Exception as e:
                    print(f"Error fetching CloudWatch metrics for instance {instance_id} in region {region}: {str(e)}")
                    continue
                
                # Check if the instance has low activity
                if (cpu_metric['Datapoints'] and
                    network_in_metric['Datapoints'] and
                    network_out_metric['Datapoints'] and
                    cpu_metric['Datapoints'][0]['Average'] < 0.3 and
                    network_in_metric['Datapoints'][0]['Average'] < 30000 and
                    network_out_metric['Datapoints'][0]['Average'] < 40000):
                    
                    low_activity_instances.append({
                        'Region': region,
                        'InstanceName': instance_name,
                        'InstanceId': instance_id,
                        'InstanceType': instance_type,
                        'Average CPU Utilization': cpu_metric['Datapoints'][0]['Average'],
                        'Average Network In': network_in_metric['Datapoints'][0]['Average'],
                        'Average Network Out': network_out_metric['Datapoints'][0]['Average']
                    })

    if low_activity_instances:
        for instance in low_activity_instances:
            print(f"Low Activity EC2 Instance in {instance['Region']}:\n"
                  f"Instance Name: {instance['InstanceName']}\n"
                  f"Instance ID: {instance['InstanceId']}\n"
                  f"Instance Type: {instance['InstanceType']}\n"
                  f"Average CPU Utilization: {instance['Average CPU Utilization']}%\n"
                  f"Average Network In: {instance['Average Network In']} Bytes\n"
                  f"Average Network Out: {instance['Average Network Out']} Bytes\n---")
    
    return {
        'statusCode': 200,
        'body': low_activity_instances
    }
